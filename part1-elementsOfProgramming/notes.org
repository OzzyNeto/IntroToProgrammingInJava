#+TITLE: Notes for Chapter 1: Elements of Programming
#+AUTHOR: Ozzy Neto

* Section 1.1 - Your First Program

** Executing a Program
- Every Java program must reside in a file whose name matches the one after the word =class= on the first line.

** Errors
- _Compile-time Errors_ are caught when you compile the progam because they prevent the compiler from doing the translation.
  - _Syntax Errors_ are also usually caught by the compiler.
- _Run-time Errors_ only show up when you execute the program.

** Input and Output
- We can think of our /UseArgument/ program as implementing a function that maps a string of characters (the argument) into another string of character
  (the message printed back to the terminal).
- This _black box model_ is simple and general enough to allow completion, in theory, of any computational task.

** Exercises

*** 1.1.1 - Write a program that prints the Hello, World message 10 times.
[[file:HelloWorldx10.java::// Exercise 1.1.1][HelloWorldx10]]

*** 1.1.2 - Describe what happens if you omit the following in HelloWorld.java:
**** public
- *Runtime Error*
  #+begin_src text
    Error: Main method not found in class HelloWorld, please define the main method as:
       public static void main(String[] args)
    or a JavaFX application class must extend javafx.application.Application
  #+end_src
**** static
- *Runtime Error*
  #+begin_src text
    Error: Main method is not static in class HelloWorld, please define the main method as:
       public static void main(String[] args)
#+end_src
**** void
- *Compile-time Error*
  #+begin_src text
    HelloWorld.java:5: error: invalid method declaration; return type required
            public static main(String[] args)
                          ^
    1 error
  #+end_src
**** args
- *Compile-time Error*
  #+begin_src text
    HelloWorld.java:5: error: <identifier> expected
            public static void main(String[])
                                            ^
    1 error
  #+end_src

*** 1.1.3: Describe what happens if you misspell (by, say, omitting the second letter) the following in HelloWorld.java:

**** public
- *Compile-time Error*
  #+begin_src text
    HelloWorld.java:3: error: class, interface, enum, or record expected
    pblic class HelloWorld
    ^
    HelloWorld.java:5: error: <identifier> expected
            pblic static void main(String[] args)
                 ^
    2 errors
  #+end_src
**** static
- *Compile-time Error*
  #+begin_src text
    HelloWorld.java:5: error: <identifier> expected
            public satic void main(String[] args)
                        ^
    1 error
  #+end_src
**** void
- *Compile-time Error*
  #+begin_src text
    HelloWorld.java:5: error: cannot find symbol
            public static vid main(String[] args)
                          ^
      symbol:   class vid
      location: class HelloWorld
    1 error
  #+end_src
**** args
- No error, program runs as expected.

*** 1.1.4: Describe what happens if you try to execute UseArgument with each of the following command lines:

**** java UseArgument java
#+begin_src text
  Hi, java. How are you?
#+end_src
**** java UseArgument @!&a%
#+begin_src text
  bash: !: event not found
#+end_src
**** java UseArgument 1234
#+begin_src text
  Hi, 1234. How are you?
#+end_src
**** java UseArgument.java Bob
#+begin_src text
  Hi, Bob. How are you?
#+end_src
**** java UseArgument Alice Bob
#+begin_src text
  Hi, Alice. How are you?
#+end_src

*** 1.1.5: Modify UseArgument. java to make a program UseThree. java that takes three names and prints out a proper sentence with the names in the reverse of the order given, so that, for example, java UseThree Alice Bob Carol gives Hi Carol, Bob, and Alice.
#+begin_src java
  // Program 1.1.5: UseThree.java

  public class UseThree
  {
          public static void main(String[] args)
          {
                  System.out.print("Hi ");
                  System.out.print(args[2]);
                  System.out.print(", ");
                  System.out.print(args[1]);
                  System.out.print(", and ");
                  System.out.print(args[0]);
                  System.out.println(".");
          }
  }
#+end_src

* Section 1.2 - Built-in Types of Data

